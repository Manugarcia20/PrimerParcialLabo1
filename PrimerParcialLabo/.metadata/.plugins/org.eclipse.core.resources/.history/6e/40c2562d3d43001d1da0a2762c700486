/*
 * libro.c
 *
 *  Created on: 1 oct. 2022
 *      Author: manu
 */

#include "libro.h"
#include "input.h"
#include "editorial.h"
#include "autor.h"
#include "funciones.h"

int InicializarLibros(eLibro libros[], int tam){
	int i;
	int isOK = -1;
	if (libros != NULL && tam > 0) {
		for (i = 0; i < tam; i++) {
			libros[i].estado = VACIO;
			isOK = 0;
		}
	}
	return isOK;


}
int BuscarEspacioLibre(eLibro libros[], int tam, int *pPosicion){
	int isOk = 0;

		if(libros != NULL && tam > 0 && pPosicion != NULL)
		{
			*pPosicion = -1;
			for(int i = 0; i < tam; i++)
			{
				if(libros[i].estado == 0)
				{
					*pPosicion = i;
					break;
				}
			}
			isOk = 1;

		}
		return isOk;

}

int AltaPasajero(eLibro libros[], int tamL, int *pId, eAutor autores[], int tamA, ePais paises[], int tamP, eEditorial editoriales[], int tamE){

	int isOk = 0;
		int posicion;
		int idAutor;
		int idEditorial;

		eLibro nuevoLibro;


		if (libros != NULL && tamL > 0 && pId != NULL) {


			if (BuscarEspacioLibre(libros, tamL, &posicion)) {

				if (posicion == -1)
				{
					printf("\nNo hay lugar en el sistema\n");

				}
				else
				{
					while (getStringLetras("\nIngrese un titulo: ", nuevoLibro.titulo) == -1)
					{
						printf("\nCaracteres invalidos. Por favor, ingrese solo letras: ");
					}

					nuevoLibro.fecha.dia = getValidInt("\nIngrese el dia de publicacion del libro: ","Error. Ingrese solo numeros: ",1,30);
					nuevoLibro.fecha.mes = getValidInt("\nIngrese el mes de publicacion del libro: ","Error. Ingrese solo numeros: ",1,12);
					nuevoLibro.fecha.anio = getValidInt("\nIngrese el anio de publicacion del libro: ","Error. Ingrese solo numeros: ",1700,2022);
				    CargarPrecio(&nuevoLibro.importe, "\nIngrese el precio del libro :  ", "\nError. Ingrese solo numeros: ");

				    printf("\n\n");

				    MostrarAutor(autores,tamA,paises);
				    idAutor = getValidInt("\nIngrese el autor del libro: ", "\nError, ingrese un tipo correcto: ", 1, 10);
				    nuevoLibro.idAutor = idAutor;

				    printf("\n\n");
				    MostrarEditorial(editoriales,tamE);
				   	idEditorial = getValidInt("\nIngrese la editorial del libro: ", "\nError, ingrese un tipo correcto: ", 1, 5);
				   	nuevoLibro.idEditorial = idEditorial;

					nuevoLibro.estado = LLENO;
					nuevoLibro.idLibro = *pId;
					(*pId)++;

					libros[posicion] = nuevoLibro;
					isOk = 1;

				}

			}
		}

			return isOk;


}


int ModificarLibros(eLibro libros[], int tamL , int idLibroCambio, eAutor autores[], int tamA, eEditorial editoriales[], int tamE,ePais paises[], int tamP)
	{
		int isOk;
		int subMenu;
		int indexPasajeroCambio;
		int nuevoTipo;
		int nuevoEstado;
		char respuesta;


					isOk = -1;
					if (libros != NULL && tamL > 0) {
						printf("\n		*** MODIFICACION DE LIBROS ***						\n\n");
						MostrarListaLibros(libros,tamL,autores,tamA, editoriales,tamE,paises,tamP); //--muestro libros activos
						idPasajeroCambio = getValidInt( "\nIngrese el id del pasajero a modificar:  ", "Error, ingrese un ID valido:  ", 1, 2000);
						indexPasajeroCambio = FindPassengerById(listaPasajeros, tam, idPasajeroCambio);
						if (indexPasajeroCambio != -1) //el empleado existe
								{

							respuesta = getChar("\nEsta seguro de que quiere modificar al pasajero %d ? s/n ", idPasajeroCambio);
							if (respuesta == 's') {

								do{
								subMenu = subMenuModificar();
								switch(subMenu){
								case 1:
									printf("\nUsted eligio: MODIFICAR NOMBRE\n");
									while (getStringLetras("\nIngrese un nuevo nombre: ", listaPasajeros->nombre) == -1)
									{
										printf("\nCaracteres invalidos. Por favor, ingrese solo letras");
									}
									break;
								case 2:
									printf("\nUsted eligio: MODIFICAR APELLIDO\n");
									while (getStringLetras("\nIngrese un nuevo apellido: ", listaPasajeros->apellido) == -1)
									{
									printf("\nCaracteres invalidos. Por favor, ingrese solo letras");
									}
									break;
								case 3:
									printf("\nUsted eligio: MODIFICAR PRECIO DE VUELO\n");
									CargarPrecio(&listaPasajeros->precio, "\nIngrese el nuevo precio de vuelo:  ", "\nError. Ingrese solo numeros");
									break;
								case 4:
									printf("\nUsted eligio: MODIFICAR CODIGO DE VUELO\n");
									while (getStringAlfaNumerico("\nIngrese un codigo de vuelo: ", listaPasajeros->codigoVuelo) == -1)
									{
									printf("\nCaracteres invalidos. Por favor, ingrese solo numeros o letras");
									}
									break;
								case 5:
									printf("\nUsted eligio: MODIFICAR TIPO DE PASAJERO\n");
									 listarTipos(tipoPasajero,tamPas);
									 nuevoTipo = getValidInt("\nIngrese el id del nuevo tipo de pasajero: " , "\nError, ingrese un id valido: ",5000,5002);
									 listaPasajeros->idTipo = nuevoTipo;
									break;
								case 6:
									printf("\nUsted eligio: MODIFICAR ESTADO DE VUELO\n");
									listarEstados(estadoVuelo,tamEstado);
									nuevoEstado = getValidInt("\nIngrese el id del nuevo estado de vuelo: " , "\nError, ingrese un id valido: ",1,3);
									listaPasajeros->idEstado = nuevoEstado;
									break;
								case 7:
									printf("\nUsted eligio: SALIR\n");
									break;
								default:
									printf("\nOpcion incorrecta. Ingrese una opcion valida: ");
									break;
								}
								}while(subMenu !=6);

							}else{
								printf("\nModificacion cancelada");
							}







	}else
	{
		printf("\nNo hay ningun pasajero cargado con el id %d", idPasajeroCambio);
	}
					}

		return isOk;
	}



















